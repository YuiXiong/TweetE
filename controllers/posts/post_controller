const userModel = require("../../models/users/users");
const postModel = require("../../models/users/userPosts");
const mongoose = require('mongoose')

const controller = {
  postTweetE: async (req, res) => {
    try {
      await postModel.create({
        tweetEContent: req.body.tweetEContent,
      });
    } catch (err) {
      res.send("Error creating post on DB");
      return;
    }
    res.redirect("/post");
  },
  
  getAllTweetE: async (req, res) => {
    const tweetE = await postModel.find().exec();
    res.render("posts/showall", { tweetE });
  },

  //get one tweet using /post/:postid route to set up for editing tweet
  getOneTweetE: async (req, res) => {
    try {
      const post = await postModel.findById(req.params.postId);
      res.render('posts/showone', {post});
    } catch (err) {
      console.log("error", err);
      res.send("Error getting one post from DB");
      return;
    }
  },

  //edit tweet using patch route /post/:postId/
  editTweetE: async (req,res) => {
    const post = await postModel.findById(req.params.postId);
    if (post === null ){
      res.send("no matching objectID")
    }
    try {
      //const post = await postModel.findById(req.params.postId);
      await postModel.findByIdAndUpdate(req.params.postId,{tweetEContent: req.body.updateTweetEContent}) 
      res.redirect("/post")
      } catch(err) {
        res.send("error with updating tweete")
      }
    },

    //delete tweet using delete route /post/:postId/
    deleteTweetE: async (req,res) => {
      const post = await postModel.findById(req.params.postId)
      console.log(post)
      try {
        await postModel.findByIdAndDelete(post)
        console.log('tweet deleted') 
        } catch(err) {
          res.send("error with deleting tweete")
        }
        //res.redirect("/post")
     }

};
module.exports = controller;
